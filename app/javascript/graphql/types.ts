import gql from 'graphql-tag';
import * as VueApolloComposable from '@vue/apollo-composable';
import * as VueCompositionApi from '@vue/composition-api';
export type Maybe<T> = T | null;
export type ReactiveFunction<TParam> = () => TParam;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** DateTime */
  DateTime: any;
};

/** Autogenerated input type of AddBlankSchedule */
export type AddBlankScheduleInput = {
  startAt: Scalars['DateTime'];
  endAt: Scalars['DateTime'];
  occupationId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddBlankSchedule */
export type AddBlankSchedulePayload = {
  __typename?: 'AddBlankSchedulePayload';
  blankSchedules?: Maybe<Array<Schedule>>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of CompanySchedules */
export type CompanySchedulesPayload = {
  __typename?: 'CompanySchedulesPayload';
  id: Scalars['ID'];
  schedules: ScheduleConnection;
};


/** Autogenerated return type of CompanySchedules */
export type CompanySchedulesPayloadSchedulesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of CompanyTasks */
export type CompanyTasksPayload = {
  __typename?: 'CompanyTasksPayload';
  confirmedScheduleTasks: ScheduleConnection;
  hasRespondSchedules: ScheduleConnection;
  id: Scalars['ID'];
  nonactiveRecruitements: RecruitementConnection;
  recruitements: RecruitementConnection;
  waitingSchedules: ScheduleConnection;
};


/** Autogenerated return type of CompanyTasks */
export type CompanyTasksPayloadConfirmedScheduleTasksArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of CompanyTasks */
export type CompanyTasksPayloadHasRespondSchedulesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of CompanyTasks */
export type CompanyTasksPayloadNonactiveRecruitementsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of CompanyTasks */
export type CompanyTasksPayloadRecruitementsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of CompanyTasks */
export type CompanyTasksPayloadWaitingSchedulesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated input type of DestroyBlankSchedule */
export type DestroyBlankScheduleInput = {
  blankScheduleId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DestroyBlankSchedule */
export type DestroyBlankSchedulePayload = {
  __typename?: 'DestroyBlankSchedulePayload';
  blankSchedule?: Maybe<Schedule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of EditBlankSchedule */
export type EditBlankScheduleInput = {
  blankScheduleId: Scalars['ID'];
  startAt?: Maybe<Scalars['DateTime']>;
  endAt?: Maybe<Scalars['DateTime']>;
  occupationId?: Maybe<Scalars['ID']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of EditBlankSchedule */
export type EditBlankSchedulePayload = {
  __typename?: 'EditBlankSchedulePayload';
  blankSchedule?: Maybe<Schedule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated input type of EditUser */
export type EditUserInput = {
  userId: Scalars['ID'];
  example?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of EditUser */
export type EditUserPayload = {
  __typename?: 'EditUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  user?: Maybe<User>;
};

/** Autogenerated return type of IndividualSchedules */
export type IndividualSchedulesPayload = {
  __typename?: 'IndividualSchedulesPayload';
  id: Scalars['ID'];
  schedules: ScheduleConnection;
};


/** Autogenerated return type of IndividualSchedules */
export type IndividualSchedulesPayloadSchedulesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated return type of IndividualTasks */
export type IndividualTasksPayload = {
  __typename?: 'IndividualTasksPayload';
  blankScheduleTasks: OccupationConnection;
  confirmedScheduleTasks: ScheduleConnection;
  id: Scalars['ID'];
  respondingTasks: ScheduleConnection;
  waitingTasks: ScheduleConnection;
};


/** Autogenerated return type of IndividualTasks */
export type IndividualTasksPayloadBlankScheduleTasksArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of IndividualTasks */
export type IndividualTasksPayloadConfirmedScheduleTasksArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of IndividualTasks */
export type IndividualTasksPayloadRespondingTasksArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


/** Autogenerated return type of IndividualTasks */
export type IndividualTasksPayloadWaitingTasksArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Member = {
  __typename?: 'Member';
  color: Scalars['String'];
  companyName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  role: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addBlankSchedule?: Maybe<AddBlankSchedulePayload>;
  destroyBlankSchedule?: Maybe<DestroyBlankSchedulePayload>;
  editBlankSchedule?: Maybe<EditBlankSchedulePayload>;
  editUser?: Maybe<EditUserPayload>;
  id: Scalars['ID'];
  proceedRecruitement?: Maybe<ProceedRecruitementPayload>;
  requestScheduleToIndividualUser?: Maybe<RequestScheduleToIndividualUserPayload>;
  requestScheduleToOccupation?: Maybe<RequestScheduleToOccupationPayload>;
  respondSchedule: RespondSchedulePayload;
};


export type MutationAddBlankScheduleArgs = {
  input: AddBlankScheduleInput;
};


export type MutationDestroyBlankScheduleArgs = {
  input: DestroyBlankScheduleInput;
};


export type MutationEditBlankScheduleArgs = {
  input: EditBlankScheduleInput;
};


export type MutationEditUserArgs = {
  input: EditUserInput;
};


export type MutationProceedRecruitementArgs = {
  input: ProceedRecruitementInput;
};


export type MutationRequestScheduleToIndividualUserArgs = {
  input: RequestScheduleToIndividualUserInput;
};


export type MutationRequestScheduleToOccupationArgs = {
  input: RequestScheduleToOccupationInput;
};


export type MutationRespondScheduleArgs = {
  input: RespondScheduleInput;
};

export type Occupation = {
  __typename?: 'Occupation';
  address?: Maybe<Scalars['String']>;
  applyFrom?: Maybe<Scalars['String']>;
  color: Scalars['String'];
  companyName?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  item?: Maybe<Scalars['String']>;
  memo?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  requiredTime?: Maybe<Scalars['String']>;
};

/** The connection type for Occupation. */
export type OccupationConnection = {
  __typename?: 'OccupationConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OccupationEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Occupation>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OccupationEdge = {
  __typename?: 'OccupationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Occupation>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ProceedRecruitement */
export type ProceedRecruitementInput = {
  recruitementId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of ProceedRecruitement */
export type ProceedRecruitementPayload = {
  __typename?: 'ProceedRecruitementPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  recruitement?: Maybe<Recruitement>;
};

export type Query = {
  __typename?: 'Query';
  blankSchedule?: Maybe<Schedule>;
  currentUser?: Maybe<User>;
  id: Scalars['ID'];
  schedule?: Maybe<Schedule>;
  user?: Maybe<User>;
  users: UserConnection;
};


export type QueryBlankScheduleArgs = {
  blankScheduleId: Scalars['ID'];
};


export type QueryScheduleArgs = {
  scheduleId: Scalars['ID'];
};


export type QueryUserArgs = {
  id: Scalars['ID'];
};


export type QueryUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Recruitement = {
  __typename?: 'Recruitement';
  companyUser: Member;
  createdAt?: Maybe<Scalars['DateTime']>;
  endAt?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  individualUser: Member;
  isFixed: Scalars['Boolean'];
  occupation: Occupation;
  stageCount: Scalars['Int'];
  startAt?: Maybe<Scalars['DateTime']>;
};

/** The connection type for Recruitement. */
export type RecruitementConnection = {
  __typename?: 'RecruitementConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RecruitementEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Recruitement>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecruitementEdge = {
  __typename?: 'RecruitementEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Recruitement>;
};

/** Autogenerated input type of RequestScheduleToIndividualUser */
export type RequestScheduleToIndividualUserInput = {
  individualUserId: Scalars['ID'];
  occupationId: Scalars['ID'];
  startAt: Scalars['DateTime'];
  endAt: Scalars['DateTime'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RequestScheduleToIndividualUser */
export type RequestScheduleToIndividualUserPayload = {
  __typename?: 'RequestScheduleToIndividualUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  schedule?: Maybe<Schedule>;
};

/** Autogenerated input type of RequestScheduleToOccupation */
export type RequestScheduleToOccupationInput = {
  occupationId: Scalars['ID'];
  startAt: Scalars['DateTime'];
  endAt: Scalars['DateTime'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RequestScheduleToOccupation */
export type RequestScheduleToOccupationPayload = {
  __typename?: 'RequestScheduleToOccupationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  schedule?: Maybe<Schedule>;
};

/** Autogenerated input type of RespondSchedule */
export type RespondScheduleInput = {
  scheduleId: Scalars['ID'];
  isAccept?: Maybe<Scalars['Boolean']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RespondSchedule */
export type RespondSchedulePayload = {
  __typename?: 'RespondSchedulePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  schedule?: Maybe<Schedule>;
};

export type Schedule = {
  __typename?: 'Schedule';
  acceptedAt?: Maybe<Scalars['DateTime']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  endAt?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  isRequest: Scalars['Boolean'];
  mine: Scalars['Boolean'];
  occupation?: Maybe<Occupation>;
  requester: ScheduleRequester;
  responder?: Maybe<Member>;
  startAt?: Maybe<Scalars['DateTime']>;
  status: Scalars['String'];
};

/** The connection type for Schedule. */
export type ScheduleConnection = {
  __typename?: 'ScheduleConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ScheduleEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Schedule>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ScheduleEdge = {
  __typename?: 'ScheduleEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Schedule>;
};

export type ScheduleRequester = Member | Occupation;

export type Subscription = {
  __typename?: 'Subscription';
  companySchedules: CompanySchedulesPayload;
  companyTasks: CompanyTasksPayload;
  id: Scalars['ID'];
  individualSchedules: IndividualSchedulesPayload;
  individualTasks: IndividualTasksPayload;
};


export type SubscriptionCompanySchedulesArgs = {
  occupationIds: Array<Scalars['ID']>;
  userIds: Array<Scalars['ID']>;
};

export type User = {
  __typename?: 'User';
  color: Scalars['String'];
  companyName?: Maybe<Scalars['String']>;
  companyOccupations: OccupationConnection;
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  isCompany: Scalars['Boolean'];
  isIndividual: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  occupations: OccupationConnection;
  recruitements: RecruitementConnection;
  role: Scalars['String'];
};


export type UserCompanyOccupationsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserOccupationsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserRecruitementsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type ScheduleItemFragment = (
  { __typename?: 'Schedule' }
  & Pick<Schedule, 'id' | 'startAt' | 'endAt' | 'createdAt' | 'acceptedAt' | 'mine' | 'isRequest' | 'status'>
  & { occupation?: Maybe<(
    { __typename?: 'Occupation' }
    & Pick<Occupation, 'id' | 'name' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
  )>, requester: (
    { __typename: 'Member' }
    & Pick<Member, 'id' | 'name' | 'color' | 'companyName'>
  ) | (
    { __typename: 'Occupation' }
    & Pick<Occupation, 'id' | 'name' | 'companyName'>
  ), responder?: Maybe<(
    { __typename?: 'Member' }
    & Pick<Member, 'id' | 'name' | 'color' | 'companyName'>
  )> }
);

export type AddBlankScheduleMutationVariables = {
  input: AddBlankScheduleInput;
};


export type AddBlankScheduleMutation = (
  { __typename?: 'Mutation' }
  & { addBlankSchedule?: Maybe<(
    { __typename?: 'AddBlankSchedulePayload' }
    & { blankSchedules?: Maybe<Array<(
      { __typename?: 'Schedule' }
      & Pick<Schedule, 'id' | 'startAt' | 'endAt'>
    )>> }
  )> }
);

export type DestroyBlankScheduleMutationVariables = {
  input: DestroyBlankScheduleInput;
};


export type DestroyBlankScheduleMutation = (
  { __typename?: 'Mutation' }
  & { destroyBlankSchedule?: Maybe<(
    { __typename?: 'DestroyBlankSchedulePayload' }
    & { blankSchedule?: Maybe<(
      { __typename?: 'Schedule' }
      & Pick<Schedule, 'id' | 'startAt' | 'endAt'>
    )> }
  )> }
);

export type EditBlankScheduleMutationVariables = {
  input: EditBlankScheduleInput;
};


export type EditBlankScheduleMutation = (
  { __typename?: 'Mutation' }
  & { editBlankSchedule?: Maybe<(
    { __typename?: 'EditBlankSchedulePayload' }
    & { blankSchedule?: Maybe<(
      { __typename?: 'Schedule' }
      & Pick<Schedule, 'id' | 'startAt' | 'endAt'>
    )> }
  )> }
);

export type EditUserMutationVariables = {
  input: EditUserInput;
};


export type EditUserMutation = (
  { __typename?: 'Mutation' }
  & { editUser?: Maybe<(
    { __typename?: 'EditUserPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )> }
  )> }
);

export type ProceedRecruitementMutationVariables = {
  input: ProceedRecruitementInput;
};


export type ProceedRecruitementMutation = (
  { __typename?: 'Mutation' }
  & { proceedRecruitement?: Maybe<(
    { __typename?: 'ProceedRecruitementPayload' }
    & { recruitement?: Maybe<(
      { __typename?: 'Recruitement' }
      & Pick<Recruitement, 'id'>
    )> }
  )> }
);

export type RequestScheduleToIndividualUserMutationVariables = {
  input: RequestScheduleToIndividualUserInput;
};


export type RequestScheduleToIndividualUserMutation = (
  { __typename?: 'Mutation' }
  & { requestScheduleToIndividualUser?: Maybe<(
    { __typename?: 'RequestScheduleToIndividualUserPayload' }
    & { schedule?: Maybe<(
      { __typename?: 'Schedule' }
      & Pick<Schedule, 'id'>
    )> }
  )> }
);

export type RequestScheduleToOccupationMutationVariables = {
  input: RequestScheduleToOccupationInput;
};


export type RequestScheduleToOccupationMutation = (
  { __typename?: 'Mutation' }
  & { requestScheduleToOccupation?: Maybe<(
    { __typename?: 'RequestScheduleToOccupationPayload' }
    & { schedule?: Maybe<(
      { __typename?: 'Schedule' }
      & Pick<Schedule, 'id'>
    )> }
  )> }
);

export type RespondScheduleMutationVariables = {
  input: RespondScheduleInput;
};


export type RespondScheduleMutation = (
  { __typename?: 'Mutation' }
  & { respondSchedule: (
    { __typename?: 'RespondSchedulePayload' }
    & { schedule?: Maybe<(
      { __typename?: 'Schedule' }
      & Pick<Schedule, 'id'>
    )> }
  ) }
);

export type BlankScheduleQueryVariables = {
  blankScheduleId: Scalars['ID'];
};


export type BlankScheduleQuery = (
  { __typename?: 'Query' }
  & { blankSchedule?: Maybe<(
    { __typename?: 'Schedule' }
    & Pick<Schedule, 'id' | 'startAt' | 'endAt' | 'mine' | 'isRequest' | 'status'>
    & { requester: (
      { __typename: 'Member' }
      & Pick<Member, 'id' | 'name' | 'color' | 'companyName'>
    ) | (
      { __typename: 'Occupation' }
      & Pick<Occupation, 'id' | 'name' | 'companyName'>
    ) }
  )> }
);

export type ScheduleQueryVariables = {
  scheduleId: Scalars['ID'];
};


export type ScheduleQuery = (
  { __typename?: 'Query' }
  & { schedule?: Maybe<(
    { __typename?: 'Schedule' }
    & ScheduleItemFragment
  )> }
);

export type CurrentUserQueryVariables = {};


export type CurrentUserQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email' | 'role' | 'color' | 'name' | 'companyName' | 'isIndividual' | 'isCompany'>
    & { occupations: (
      { __typename?: 'OccupationConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Occupation' }
        & Pick<Occupation, 'id' | 'name' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
      )>>> }
    ), companyOccupations: (
      { __typename?: 'OccupationConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Occupation' }
        & Pick<Occupation, 'id' | 'name' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
      )>>> }
    ), recruitements: (
      { __typename?: 'RecruitementConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Recruitement' }
        & Pick<Recruitement, 'id'>
        & { individualUser: (
          { __typename?: 'Member' }
          & Pick<Member, 'id' | 'name'>
        ), occupation: (
          { __typename?: 'Occupation' }
          & Pick<Occupation, 'id' | 'name' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
        ) }
      )>>> }
    ) }
  )> }
);

export type CompanySchedulesSubscriptionVariables = {
  occupationIds: Array<Scalars['ID']>;
  userIds: Array<Scalars['ID']>;
};


export type CompanySchedulesSubscription = (
  { __typename?: 'Subscription' }
  & { companySchedules: (
    { __typename?: 'CompanySchedulesPayload' }
    & { schedules: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & Pick<Schedule, 'id' | 'startAt' | 'endAt' | 'mine' | 'isRequest' | 'status'>
        & { requester: (
          { __typename: 'Member' }
          & Pick<Member, 'id' | 'name' | 'color' | 'companyName'>
        ) | (
          { __typename: 'Occupation' }
          & Pick<Occupation, 'id' | 'name' | 'color' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
        ) }
      )>>> }
    ) }
  ) }
);

export type CompanyTasksSubscriptionSubscriptionVariables = {};


export type CompanyTasksSubscriptionSubscription = (
  { __typename?: 'Subscription' }
  & { companyTasks: (
    { __typename?: 'CompanyTasksPayload' }
    & { recruitements: (
      { __typename?: 'RecruitementConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Recruitement' }
        & Pick<Recruitement, 'id' | 'createdAt' | 'stageCount' | 'isFixed'>
        & { individualUser: (
          { __typename?: 'Member' }
          & Pick<Member, 'id' | 'name'>
        ), occupation: (
          { __typename?: 'Occupation' }
          & Pick<Occupation, 'id' | 'name'>
        ) }
      )>>> }
    ), nonactiveRecruitements: (
      { __typename?: 'RecruitementConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Recruitement' }
        & Pick<Recruitement, 'id' | 'createdAt'>
        & { individualUser: (
          { __typename?: 'Member' }
          & Pick<Member, 'id' | 'name'>
        ), occupation: (
          { __typename?: 'Occupation' }
          & Pick<Occupation, 'id' | 'name'>
        ) }
      )>>> }
    ), hasRespondSchedules: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & ScheduleItemFragment
      )>>> }
    ), waitingSchedules: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & ScheduleItemFragment
      )>>> }
    ), confirmedScheduleTasks: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & ScheduleItemFragment
      )>>> }
    ) }
  ) }
);

export type IndividualSchedulesSubscriptionVariables = {};


export type IndividualSchedulesSubscription = (
  { __typename?: 'Subscription' }
  & { individualSchedules: (
    { __typename?: 'IndividualSchedulesPayload' }
    & { schedules: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & Pick<Schedule, 'id' | 'startAt' | 'endAt' | 'mine' | 'isRequest' | 'status'>
        & { occupation?: Maybe<(
          { __typename?: 'Occupation' }
          & Pick<Occupation, 'id' | 'name' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
        )>, requester: (
          { __typename: 'Member' }
          & Pick<Member, 'id' | 'name' | 'color' | 'companyName'>
        ) | (
          { __typename: 'Occupation' }
          & Pick<Occupation, 'id' | 'name' | 'color' | 'address' | 'applyFrom' | 'memo' | 'item' | 'companyName' | 'requiredTime'>
        ), responder?: Maybe<(
          { __typename?: 'Member' }
          & Pick<Member, 'id' | 'name' | 'color' | 'companyName'>
        )> }
      )>>> }
    ) }
  ) }
);

export type IndividualTasksSubscriptionSubscriptionVariables = {};


export type IndividualTasksSubscriptionSubscription = (
  { __typename?: 'Subscription' }
  & { individualTasks: (
    { __typename?: 'IndividualTasksPayload' }
    & { blankScheduleTasks: (
      { __typename?: 'OccupationConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Occupation' }
        & Pick<Occupation, 'id' | 'name' | 'companyName'>
      )>>> }
    ), waitingTasks: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & ScheduleItemFragment
      )>>> }
    ), respondingTasks: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & ScheduleItemFragment
      )>>> }
    ), confirmedScheduleTasks: (
      { __typename?: 'ScheduleConnection' }
      & { nodes?: Maybe<Array<Maybe<(
        { __typename?: 'Schedule' }
        & ScheduleItemFragment
      )>>> }
    ) }
  ) }
);

export const ScheduleItemFragmentDoc = gql`
    fragment ScheduleItem on Schedule {
  id
  startAt
  endAt
  createdAt
  acceptedAt
  mine
  isRequest
  status
  occupation {
    id
    name
    address
    applyFrom
    memo
    item
    companyName
    requiredTime
  }
  requester {
    __typename
    ... on Member {
      id
      name
      color
      companyName
    }
    ... on Occupation {
      id
      name
      companyName
    }
  }
  responder {
    id
    name
    color
    companyName
  }
}
    `;
export const AddBlankScheduleDocument = gql`
    mutation addBlankSchedule($input: AddBlankScheduleInput!) {
  addBlankSchedule(input: $input) {
    blankSchedules {
      id
      startAt
      endAt
    }
  }
}
    `;

/**
 * __useAddBlankScheduleMutation__
 *
 * To run a mutation, you first call `useAddBlankScheduleMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useAddBlankScheduleMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useAddBlankScheduleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddBlankScheduleMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<AddBlankScheduleMutation, AddBlankScheduleMutationVariables>) {
            return VueApolloComposable.useMutation<AddBlankScheduleMutation, AddBlankScheduleMutationVariables>(AddBlankScheduleDocument, options);
          }
export type AddBlankScheduleMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<AddBlankScheduleMutation, AddBlankScheduleMutationVariables>;
export const DestroyBlankScheduleDocument = gql`
    mutation destroyBlankSchedule($input: DestroyBlankScheduleInput!) {
  destroyBlankSchedule(input: $input) {
    blankSchedule {
      id
      startAt
      endAt
    }
  }
}
    `;

/**
 * __useDestroyBlankScheduleMutation__
 *
 * To run a mutation, you first call `useDestroyBlankScheduleMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useDestroyBlankScheduleMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useDestroyBlankScheduleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDestroyBlankScheduleMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<DestroyBlankScheduleMutation, DestroyBlankScheduleMutationVariables>) {
            return VueApolloComposable.useMutation<DestroyBlankScheduleMutation, DestroyBlankScheduleMutationVariables>(DestroyBlankScheduleDocument, options);
          }
export type DestroyBlankScheduleMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<DestroyBlankScheduleMutation, DestroyBlankScheduleMutationVariables>;
export const EditBlankScheduleDocument = gql`
    mutation editBlankSchedule($input: EditBlankScheduleInput!) {
  editBlankSchedule(input: $input) {
    blankSchedule {
      id
      startAt
      endAt
    }
  }
}
    `;

/**
 * __useEditBlankScheduleMutation__
 *
 * To run a mutation, you first call `useEditBlankScheduleMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useEditBlankScheduleMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useEditBlankScheduleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEditBlankScheduleMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<EditBlankScheduleMutation, EditBlankScheduleMutationVariables>) {
            return VueApolloComposable.useMutation<EditBlankScheduleMutation, EditBlankScheduleMutationVariables>(EditBlankScheduleDocument, options);
          }
export type EditBlankScheduleMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<EditBlankScheduleMutation, EditBlankScheduleMutationVariables>;
export const EditUserDocument = gql`
    mutation editUser($input: EditUserInput!) {
  editUser(input: $input) {
    user {
      id
      email
    }
  }
}
    `;

/**
 * __useEditUserMutation__
 *
 * To run a mutation, you first call `useEditUserMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useEditUserMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useEditUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEditUserMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<EditUserMutation, EditUserMutationVariables>) {
            return VueApolloComposable.useMutation<EditUserMutation, EditUserMutationVariables>(EditUserDocument, options);
          }
export type EditUserMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<EditUserMutation, EditUserMutationVariables>;
export const ProceedRecruitementDocument = gql`
    mutation proceedRecruitement($input: ProceedRecruitementInput!) {
  proceedRecruitement(input: $input) {
    recruitement {
      id
    }
  }
}
    `;

/**
 * __useProceedRecruitementMutation__
 *
 * To run a mutation, you first call `useProceedRecruitementMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useProceedRecruitementMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useProceedRecruitementMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useProceedRecruitementMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<ProceedRecruitementMutation, ProceedRecruitementMutationVariables>) {
            return VueApolloComposable.useMutation<ProceedRecruitementMutation, ProceedRecruitementMutationVariables>(ProceedRecruitementDocument, options);
          }
export type ProceedRecruitementMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<ProceedRecruitementMutation, ProceedRecruitementMutationVariables>;
export const RequestScheduleToIndividualUserDocument = gql`
    mutation requestScheduleToIndividualUser($input: RequestScheduleToIndividualUserInput!) {
  requestScheduleToIndividualUser(input: $input) {
    schedule {
      id
    }
  }
}
    `;

/**
 * __useRequestScheduleToIndividualUserMutation__
 *
 * To run a mutation, you first call `useRequestScheduleToIndividualUserMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRequestScheduleToIndividualUserMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRequestScheduleToIndividualUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRequestScheduleToIndividualUserMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<RequestScheduleToIndividualUserMutation, RequestScheduleToIndividualUserMutationVariables>) {
            return VueApolloComposable.useMutation<RequestScheduleToIndividualUserMutation, RequestScheduleToIndividualUserMutationVariables>(RequestScheduleToIndividualUserDocument, options);
          }
export type RequestScheduleToIndividualUserMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<RequestScheduleToIndividualUserMutation, RequestScheduleToIndividualUserMutationVariables>;
export const RequestScheduleToOccupationDocument = gql`
    mutation requestScheduleToOccupation($input: RequestScheduleToOccupationInput!) {
  requestScheduleToOccupation(input: $input) {
    schedule {
      id
    }
  }
}
    `;

/**
 * __useRequestScheduleToOccupationMutation__
 *
 * To run a mutation, you first call `useRequestScheduleToOccupationMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRequestScheduleToOccupationMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRequestScheduleToOccupationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRequestScheduleToOccupationMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<RequestScheduleToOccupationMutation, RequestScheduleToOccupationMutationVariables>) {
            return VueApolloComposable.useMutation<RequestScheduleToOccupationMutation, RequestScheduleToOccupationMutationVariables>(RequestScheduleToOccupationDocument, options);
          }
export type RequestScheduleToOccupationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<RequestScheduleToOccupationMutation, RequestScheduleToOccupationMutationVariables>;
export const RespondScheduleDocument = gql`
    mutation respondSchedule($input: RespondScheduleInput!) {
  respondSchedule(input: $input) {
    schedule {
      id
    }
  }
}
    `;

/**
 * __useRespondScheduleMutation__
 *
 * To run a mutation, you first call `useRespondScheduleMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useRespondScheduleMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useRespondScheduleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRespondScheduleMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<RespondScheduleMutation, RespondScheduleMutationVariables>) {
            return VueApolloComposable.useMutation<RespondScheduleMutation, RespondScheduleMutationVariables>(RespondScheduleDocument, options);
          }
export type RespondScheduleMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<RespondScheduleMutation, RespondScheduleMutationVariables>;
export const BlankScheduleDocument = gql`
    query blankSchedule($blankScheduleId: ID!) {
  blankSchedule(blankScheduleId: $blankScheduleId) {
    id
    startAt
    endAt
    mine
    isRequest
    status
    requester {
      __typename
      ... on Member {
        id
        name
        color
        companyName
      }
      ... on Occupation {
        id
        name
        companyName
      }
    }
  }
}
    `;

/**
 * __useBlankScheduleQuery__
 *
 * To run a query within a Vue component, call `useBlankScheduleQuery` and pass it any options that fit your needs.
 * When your component renders, `useBlankScheduleQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useBlankScheduleQuery(
 *   {
 *      blankScheduleId: // value for 'blankScheduleId'
 *   }
 * );
 */
export function useBlankScheduleQuery(variables: BlankScheduleQueryVariables | VueCompositionApi.Ref<BlankScheduleQueryVariables> | ReactiveFunction<BlankScheduleQueryVariables>, options: VueApolloComposable.UseQueryOptions<BlankScheduleQuery, BlankScheduleQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<BlankScheduleQuery, BlankScheduleQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<BlankScheduleQuery, BlankScheduleQueryVariables>> = {}) {
            return VueApolloComposable.useQuery<BlankScheduleQuery, BlankScheduleQueryVariables>(BlankScheduleDocument, variables, options);
          }
export type BlankScheduleQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<BlankScheduleQuery, BlankScheduleQueryVariables>;
export const ScheduleDocument = gql`
    query schedule($scheduleId: ID!) {
  schedule(scheduleId: $scheduleId) {
    ...ScheduleItem
  }
}
    ${ScheduleItemFragmentDoc}`;

/**
 * __useScheduleQuery__
 *
 * To run a query within a Vue component, call `useScheduleQuery` and pass it any options that fit your needs.
 * When your component renders, `useScheduleQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useScheduleQuery(
 *   {
 *      scheduleId: // value for 'scheduleId'
 *   }
 * );
 */
export function useScheduleQuery(variables: ScheduleQueryVariables | VueCompositionApi.Ref<ScheduleQueryVariables> | ReactiveFunction<ScheduleQueryVariables>, options: VueApolloComposable.UseQueryOptions<ScheduleQuery, ScheduleQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<ScheduleQuery, ScheduleQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<ScheduleQuery, ScheduleQueryVariables>> = {}) {
            return VueApolloComposable.useQuery<ScheduleQuery, ScheduleQueryVariables>(ScheduleDocument, variables, options);
          }
export type ScheduleQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<ScheduleQuery, ScheduleQueryVariables>;
export const CurrentUserDocument = gql`
    query currentUser {
  currentUser {
    id
    email
    role
    color
    name
    companyName
    isIndividual
    isCompany
    occupations {
      nodes {
        id
        name
        address
        applyFrom
        memo
        item
        companyName
        requiredTime
      }
    }
    companyOccupations {
      nodes {
        id
        name
        address
        applyFrom
        memo
        item
        companyName
        requiredTime
      }
    }
    recruitements {
      nodes {
        id
        individualUser {
          id
          name
        }
        occupation {
          id
          name
          address
          applyFrom
          memo
          item
          companyName
          requiredTime
        }
      }
    }
  }
}
    `;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a Vue component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useCurrentUserQuery(
 *   {
 *   }
 * );
 */
export function useCurrentUserQuery(options: VueApolloComposable.UseQueryOptions<CurrentUserQuery, CurrentUserQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<CurrentUserQuery, CurrentUserQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<CurrentUserQuery, CurrentUserQueryVariables>> = {}) {
            return VueApolloComposable.useQuery<CurrentUserQuery, undefined>(CurrentUserDocument, undefined, options);
          }
export type CurrentUserQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<CurrentUserQuery, CurrentUserQueryVariables>;
export const CompanySchedulesDocument = gql`
    subscription companySchedules($occupationIds: [ID!]!, $userIds: [ID!]!) {
  companySchedules(occupationIds: $occupationIds, userIds: $userIds) {
    schedules {
      nodes {
        id
        startAt
        endAt
        mine
        isRequest
        status
        requester {
          __typename
          ... on Member {
            id
            name
            color
            companyName
          }
          ... on Occupation {
            id
            name
            color
            address
            applyFrom
            memo
            item
            companyName
            requiredTime
          }
        }
      }
    }
  }
}
    `;

/**
 * __useCompanySchedulesSubscription__
 *
 * To run a query within a Vue component, call `useCompanySchedulesSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCompanySchedulesSubscription` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useCompanySchedulesSubscription(
 *   {
 *      occupationIds: // value for 'occupationIds'
 *      userIds: // value for 'userIds'
 *   }
 * );
 */
export function useCompanySchedulesSubscription(variables: CompanySchedulesSubscriptionVariables | VueCompositionApi.Ref<CompanySchedulesSubscriptionVariables> | ReactiveFunction<CompanySchedulesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<CompanySchedulesSubscription, CompanySchedulesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<CompanySchedulesSubscription, CompanySchedulesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<CompanySchedulesSubscription, CompanySchedulesSubscriptionVariables>> = {}) {
          return VueApolloComposable.useSubscription<CompanySchedulesSubscription, CompanySchedulesSubscriptionVariables>(CompanySchedulesDocument, variables, options);
        }
export type CompanySchedulesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<CompanySchedulesSubscription, CompanySchedulesSubscriptionVariables>;
export const CompanyTasksSubscriptionDocument = gql`
    subscription companyTasksSubscription {
  companyTasks {
    recruitements {
      nodes {
        id
        createdAt
        stageCount
        isFixed
        individualUser {
          id
          name
        }
        occupation {
          id
          name
        }
      }
    }
    nonactiveRecruitements {
      nodes {
        id
        createdAt
        individualUser {
          id
          name
        }
        occupation {
          id
          name
        }
      }
    }
    hasRespondSchedules {
      nodes {
        ...ScheduleItem
      }
    }
    waitingSchedules {
      nodes {
        ...ScheduleItem
      }
    }
    confirmedScheduleTasks {
      nodes {
        ...ScheduleItem
      }
    }
  }
}
    ${ScheduleItemFragmentDoc}`;

/**
 * __useCompanyTasksSubscriptionSubscription__
 *
 * To run a query within a Vue component, call `useCompanyTasksSubscriptionSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCompanyTasksSubscriptionSubscription` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useCompanyTasksSubscriptionSubscription(
 *   {
 *   }
 * );
 */
export function useCompanyTasksSubscriptionSubscription(options: VueApolloComposable.UseSubscriptionOptions<CompanyTasksSubscriptionSubscription, CompanyTasksSubscriptionSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<CompanyTasksSubscriptionSubscription, CompanyTasksSubscriptionSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<CompanyTasksSubscriptionSubscription, CompanyTasksSubscriptionSubscriptionVariables>> = {}) {
          return VueApolloComposable.useSubscription<CompanyTasksSubscriptionSubscription, undefined>(CompanyTasksSubscriptionDocument, undefined, options);
        }
export type CompanyTasksSubscriptionSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<CompanyTasksSubscriptionSubscription, CompanyTasksSubscriptionSubscriptionVariables>;
export const IndividualSchedulesDocument = gql`
    subscription individualSchedules {
  individualSchedules {
    schedules {
      nodes {
        id
        startAt
        endAt
        mine
        isRequest
        status
        occupation {
          id
          name
          address
          applyFrom
          memo
          item
          companyName
          requiredTime
        }
        requester {
          __typename
          ... on Member {
            id
            name
            color
            companyName
          }
          ... on Occupation {
            id
            name
            color
            address
            applyFrom
            memo
            item
            companyName
            requiredTime
          }
        }
        responder {
          id
          name
          color
          companyName
        }
      }
    }
  }
}
    `;

/**
 * __useIndividualSchedulesSubscription__
 *
 * To run a query within a Vue component, call `useIndividualSchedulesSubscription` and pass it any options that fit your needs.
 * When your component renders, `useIndividualSchedulesSubscription` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useIndividualSchedulesSubscription(
 *   {
 *   }
 * );
 */
export function useIndividualSchedulesSubscription(options: VueApolloComposable.UseSubscriptionOptions<IndividualSchedulesSubscription, IndividualSchedulesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<IndividualSchedulesSubscription, IndividualSchedulesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<IndividualSchedulesSubscription, IndividualSchedulesSubscriptionVariables>> = {}) {
          return VueApolloComposable.useSubscription<IndividualSchedulesSubscription, undefined>(IndividualSchedulesDocument, undefined, options);
        }
export type IndividualSchedulesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<IndividualSchedulesSubscription, IndividualSchedulesSubscriptionVariables>;
export const IndividualTasksSubscriptionDocument = gql`
    subscription individualTasksSubscription {
  individualTasks {
    blankScheduleTasks {
      nodes {
        id
        name
        companyName
      }
    }
    waitingTasks {
      nodes {
        ...ScheduleItem
      }
    }
    respondingTasks {
      nodes {
        ...ScheduleItem
      }
    }
    confirmedScheduleTasks {
      nodes {
        ...ScheduleItem
      }
    }
  }
}
    ${ScheduleItemFragmentDoc}`;

/**
 * __useIndividualTasksSubscriptionSubscription__
 *
 * To run a query within a Vue component, call `useIndividualTasksSubscriptionSubscription` and pass it any options that fit your needs.
 * When your component renders, `useIndividualTasksSubscriptionSubscription` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the subscription, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useIndividualTasksSubscriptionSubscription(
 *   {
 *   }
 * );
 */
export function useIndividualTasksSubscriptionSubscription(options: VueApolloComposable.UseSubscriptionOptions<IndividualTasksSubscriptionSubscription, IndividualTasksSubscriptionSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<IndividualTasksSubscriptionSubscription, IndividualTasksSubscriptionSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<IndividualTasksSubscriptionSubscription, IndividualTasksSubscriptionSubscriptionVariables>> = {}) {
          return VueApolloComposable.useSubscription<IndividualTasksSubscriptionSubscription, undefined>(IndividualTasksSubscriptionDocument, undefined, options);
        }
export type IndividualTasksSubscriptionSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<IndividualTasksSubscriptionSubscription, IndividualTasksSubscriptionSubscriptionVariables>;