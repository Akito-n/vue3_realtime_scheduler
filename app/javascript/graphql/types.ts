import gql from 'graphql-tag';
import * as VueApolloComposable from '@vue/apollo-composable';
import * as VueCompositionApi from '@vue/composition-api';
export type Maybe<T> = T | null;
export type ReactiveFunction<TParam> = () => TParam;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** DateTime */
  DateTime: any;
};

/** Autogenerated input type of AddBlankSchedule */
export type AddBlankScheduleInput = {
  startAt: Scalars['DateTime'];
  endAt: Scalars['DateTime'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of AddBlankSchedule */
export type AddBlankSchedulePayload = {
  __typename?: 'AddBlankSchedulePayload';
  blankSchdule?: Maybe<BlankSchedule>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type BlankSchedule = {
  __typename?: 'BlankSchedule';
  endAt?: Maybe<Scalars['DateTime']>;
  id: Scalars['ID'];
  startAt?: Maybe<Scalars['DateTime']>;
};


/** Autogenerated input type of EditUser */
export type EditUserInput = {
  userId: Scalars['ID'];
  example?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of EditUser */
export type EditUserPayload = {
  __typename?: 'EditUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addBlankSchedule?: Maybe<AddBlankSchedulePayload>;
  editUser?: Maybe<EditUserPayload>;
};


export type MutationAddBlankScheduleArgs = {
  input: AddBlankScheduleInput;
};


export type MutationEditUserArgs = {
  input: EditUserInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  currentUser?: Maybe<User>;
  user?: Maybe<User>;
  users: UserConnection;
};


export type QueryUserArgs = {
  id: Scalars['ID'];
};


export type QueryUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type User = {
  __typename?: 'User';
  email?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  role: Scalars['String'];
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type AddBlankScheduleMutationVariables = {
  input: AddBlankScheduleInput;
};


export type AddBlankScheduleMutation = (
  { __typename?: 'Mutation' }
  & { addBlankSchedule?: Maybe<(
    { __typename?: 'AddBlankSchedulePayload' }
    & { blankSchdule?: Maybe<(
      { __typename?: 'BlankSchedule' }
      & Pick<BlankSchedule, 'id' | 'startAt' | 'endAt'>
    )> }
  )> }
);

export type EditUserMutationVariables = {
  input: EditUserInput;
};


export type EditUserMutation = (
  { __typename?: 'Mutation' }
  & { editUser?: Maybe<(
    { __typename?: 'EditUserPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )> }
  )> }
);

export type CurrentUserQueryVariables = {};


export type CurrentUserQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email' | 'role'>
  )> }
);


export const AddBlankScheduleDocument = gql`
    mutation addBlankSchedule($input: AddBlankScheduleInput!) {
  addBlankSchedule(input: $input) {
    blankSchdule {
      id
      startAt
      endAt
    }
  }
}
    `;

/**
 * __useAddBlankScheduleMutation__
 *
 * To run a mutation, you first call `useAddBlankScheduleMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useAddBlankScheduleMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useAddBlankScheduleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAddBlankScheduleMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<AddBlankScheduleMutation, AddBlankScheduleMutationVariables>) {
            return VueApolloComposable.useMutation<AddBlankScheduleMutation, AddBlankScheduleMutationVariables>(AddBlankScheduleDocument, options);
          }
export type AddBlankScheduleMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<AddBlankScheduleMutation, AddBlankScheduleMutationVariables>;
export const EditUserDocument = gql`
    mutation editUser($input: EditUserInput!) {
  editUser(input: $input) {
    user {
      id
      email
    }
  }
}
    `;

/**
 * __useEditUserMutation__
 *
 * To run a mutation, you first call `useEditUserMutation` within a Vue component and pass it any options that fit your needs.
 * When your component renders, `useEditUserMutation` returns an object that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - Several other properties: https://v4.apollo.vuejs.org/api/use-mutation.html#return
 *
 * @param options that will be passed into the mutation, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/mutation.html#options;
 *
 * @example
 * const { mutate, loading, error, onDone } = useEditUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useEditUserMutation(options: VueApolloComposable.UseMutationOptionsWithVariables<EditUserMutation, EditUserMutationVariables>) {
            return VueApolloComposable.useMutation<EditUserMutation, EditUserMutationVariables>(EditUserDocument, options);
          }
export type EditUserMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<EditUserMutation, EditUserMutationVariables>;
export const CurrentUserDocument = gql`
    query currentUser {
  currentUser {
    id
    email
    role
  }
}
    `;

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a Vue component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains result, loading and error properties
 * you can use to render your UI.
 *
 * @param options that will be passed into the query, supported options are listed on: https://v4.apollo.vuejs.org/guide-composable/query.html#options;
 *
 * @example
 * const { result, loading, error } = useCurrentUserQuery(
 *   {
 *   }
 * );
 */
export function useCurrentUserQuery(options: VueApolloComposable.UseQueryOptions<CurrentUserQuery, CurrentUserQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<CurrentUserQuery, CurrentUserQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<CurrentUserQuery, CurrentUserQueryVariables>> = {}) {
            return VueApolloComposable.useQuery<CurrentUserQuery, undefined>(CurrentUserDocument, undefined, options);
          }
export type CurrentUserQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<CurrentUserQuery, CurrentUserQueryVariables>;